{"version":3,"sources":["components/stopwatch.js","App.js","index.js"],"names":["Stopwatch","isrunning","setIsrunning","time","setTime","runned","setRunned","useEffect","interval","setInterval","clearInterval","hundredths","slice","decisecond","Math","floor","second","minute","className","handleKeys","onKeyEvent","App","useState","ReactDOM","render","document","getElementById"],"mappings":"yMAyDeA,EArDG,SAAC,GAOZ,IANLC,EAMI,EANJA,UACAC,EAKI,EALJA,aACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAMAC,qBAAU,WACR,IAAIC,EAAW,KAkBf,OAjBIP,GACFO,EAAWC,aAAY,WACrBL,EAASD,GAAQ,KAChB,IACCE,IACFK,cAAcF,GACdJ,EAAQ,GACRF,GAAa,KAELD,GAAsB,IAATE,GAAeE,GAG5BJ,GAAaI,IACvBC,GAAU,GACVI,cAAcF,GACdJ,EAAQ,KALRM,cAAcF,GACdF,GAAU,IAML,kBAAMI,cAAcF,MAC1B,CAACP,IAEJ,IAAIU,GAAc,IAAMR,GAAMS,OAAO,GACjCC,GAAc,IAAOC,KAAKC,MAAMZ,EAAO,KAAMS,OAAO,GACpDI,GAAU,IAAOF,KAAKC,MAAMZ,EAAO,KAAO,IAAKS,OAAO,GACtDK,GAAU,IAAOH,KAAKC,MAAMZ,EAAO,KAAQ,KAAMS,OAAO,GAE5D,OACE,yBAAKM,UAAU,aACb,yBAAKA,UAAU,SACZD,EADH,IACYD,EADZ,IACqBH,EAAYF,GAEjC,yBAAKO,UAAU,aAAf,oCACA,kBAAC,IAAD,CACEC,WAAY,CAAC,SACbC,WAvCa,WACiBlB,GAAjCD,QCUUoB,MAnBf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNrB,EADM,KACKC,EADL,OAEWoB,mBAAS,GAFpB,mBAENnB,EAFM,KAEAC,EAFA,OAGekB,oBAAS,GAHxB,mBAGNjB,EAHM,KAGEC,EAHF,KAKb,OACE,6BACE,kBAAC,EAAD,CACEL,UAAWA,EACXC,aAAcA,EACdC,KAAMA,EACNC,QAASA,EACTC,OAAQA,EACRC,UAAWA,MCZnBiB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.b52ee53e.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\r\nimport \"../App.css\";\r\n\r\nconst Stopwatch = ({\r\n  isrunning,\r\n  setIsrunning,\r\n  time,\r\n  setTime,\r\n  runned,\r\n  setRunned,\r\n}) => {\r\n  const startTimer = () => {\r\n    !isrunning ? setIsrunning(true) : setIsrunning(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isrunning) {\r\n      interval = setInterval(() => {\r\n        setTime((time += 1));\r\n      }, 10);\r\n      if (runned) {\r\n        clearInterval(interval);\r\n        setTime(0);\r\n        setIsrunning(false);\r\n      }\r\n    } else if (!isrunning && time !== 0 && !runned) {\r\n      clearInterval(interval);\r\n      setRunned(true);\r\n    } else if (!isrunning && runned) {\r\n      setRunned(false);\r\n      clearInterval(interval);\r\n      setTime(0);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isrunning]);\r\n\r\n  let hundredths = (\"0\" + time).slice(-1)\r\n  let decisecond = (\"0\" + (Math.floor(time / 10))).slice(-1)\r\n  let second = (\"0\" + (Math.floor(time / 100) % 60)).slice(-2);\r\n  let minute = (\"0\" + (Math.floor(time / 6000) % 100)).slice(-2);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"clock\">\r\n        {minute}:{second}:{decisecond}{hundredths}\r\n      </div>\r\n      <div className=\"info-text\">Press \"Space\" to start and stop.</div>\r\n      <KeyboardEventHandler\r\n        handleKeys={[\"space\"]}\r\n        onKeyEvent={startTimer}\r\n      ></KeyboardEventHandler>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stopwatch;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Stopwatch from \"./components/stopwatch\";\r\n\r\nfunction App() {\r\n  const [isrunning, setIsrunning] = useState(false);\r\n  const [time, setTime] = useState(0);\r\n  const [runned, setRunned] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <Stopwatch\r\n        isrunning={isrunning}\r\n        setIsrunning={setIsrunning}\r\n        time={time}\r\n        setTime={setTime}\r\n        runned={runned}\r\n        setRunned={setRunned}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}